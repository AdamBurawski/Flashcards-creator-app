import { createClient } from "@supabase/supabase-js";
import type { Database } from "./database.types";

// Utworzenie klienta Supabase po stronie klienta
const url = import.meta.env.PUBLIC_SUPABASE_URL;
const key = import.meta.env.PUBLIC_SUPABASE_KEY;

// Jeśli brak kluczy, zwracaj komunikat ale nie rzucaj błędu, co pozwoli aplikacji się uruchomić
if (!url || !key) {
  console.warn("Brak kluczy Supabase w zmiennych środowiskowych - klient używa pustych wartości");
}

export const supabase = createClient<Database>(url || '', key || '', {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false,
    // Używamy localStorage, co ułatwia dostęp do sesji
    storage: {
      getItem: (key) => {
        try {
          // W środowisku SSR localStorage nie jest dostępny
          if (typeof window === 'undefined') return null;
          return window.localStorage.getItem(key);
        } catch (error) {
          console.error('Błąd podczas odczytu z localStorage:', error);
          return null;
        }
      },
      setItem: (key, value) => {
        try {
          if (typeof window === 'undefined') return;
          window.localStorage.setItem(key, value);
        } catch (error) {
          console.error('Błąd podczas zapisu do localStorage:', error);
        }
      },
      removeItem: (key) => {
        try {
          if (typeof window === 'undefined') return;
          window.localStorage.removeItem(key);
        } catch (error) {
          console.error('Błąd podczas usuwania z localStorage:', error);
        }
      }
    }
  }
});

// Default user ID for development purposes
export const DEFAULT_USER_ID = "00000000-0000-0000-0000-000000000000";

// Eksport typu klienta Supabase
export type SupabaseClient = typeof supabase;

// Deklaracja typów dla funkcji RPC
export type Database = {
  public: {
    Tables: {
      // Tutaj domyślne tabele...
    };
    Functions: {
      insert_flashcards: {
        Args: {
          flashcards_data: {
            user_id: string;
            items: Array<{
              front: string;
              back: string;
              source: string;
              generation_id: number | null;
            }>;
          };
        };
        Returns: {
          success: boolean;
          ids: number[];
        };
      };
      insert_generation: {
        Args: {
          generation_data: Record<string, any>;
        };
        Returns: {
          success: boolean;
          id: number;
        };
      };
      get_available_flashcards_for_import: {
        Args: {
          gen_id: number;
        };
        Returns: Record<string, any>[];
      };
    };
  };
};
